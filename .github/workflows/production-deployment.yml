# GitHub Actions Workflow for Flutter RAG App Production Deployment
# .github/workflows/production-deployment.yml

name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: "3.24.0"
  JAVA_VERSION: "17"
  NODE_VERSION: "18"

jobs:
  # Quality Checks
  quality-check:
    name: Quality & Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock', '**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: |
          flutter analyze --fatal-infos --fatal-warnings
          echo "Code analysis completed"

      - name: Check formatting
        run: |
          flutter format --dry-run --set-exit-if-changed .
          echo "Code formatting check completed"

      - name: Run unit tests
        run: |
          flutter test --coverage --reporter=github
          echo "Unit tests completed"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          fail_ci_if_error: true

      - name: Security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: "security-scan.sarif"
        continue-on-error: true

      - name: Dependency vulnerability check
        run: |
          flutter pub deps --json | jq '.packages[] | select(.source == "hosted")' > dependencies.json
          echo "Dependency check completed"

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-check
    timeout-minutes: 30

    strategy:
      matrix:
        device: ["web-server", "android-emulator"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Chrome (for web tests)
        if: matrix.device == 'web-server'
        uses: browser-actions/setup-chrome@latest

      - name: Setup Android SDK (for Android tests)
        if: matrix.device == 'android-emulator'
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          target: default
          arch: x86_64

      - name: Get dependencies
        run: flutter pub get

      - name: Run integration tests - Web
        if: matrix.device == 'web-server'
        run: |
          flutter drive --driver=test_driver/integration_test.dart \
                       --target=integration_test/app_test.dart \
                       -d web-server --web-port=8080
          echo "Web integration tests completed"

      - name: Run integration tests - Android
        if: matrix.device == 'android-emulator'
        run: |
          # Create and start Android emulator
          echo "no" | avdmanager create avd -n test_emulator -k "system-images;android-34;default;x86_64"
          emulator -avd test_emulator -no-window -no-audio -no-snapshot &
          adb wait-for-device

          # Run integration tests
          flutter drive --driver=test_driver/integration_test.dart \
                       --target=integration_test/app_test.dart \
                       -d emulator-5554
          echo "Android integration tests completed"

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-reports-${{ matrix.device }}
          path: |
            test-results/
            screenshots/
            logs/

  # Build Applications
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [quality-check, integration-tests]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android signing
        run: |
          echo '${{ secrets.ANDROID_KEYSTORE_BASE64 }}' | base64 -d > android/app/keystore.jks
          echo 'storeFile=keystore.jks' > android/key.properties
          echo 'keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}' >> android/key.properties
          echo 'storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}' >> android/key.properties
          echo 'keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}' >> android/key.properties

      - name: Get dependencies
        run: flutter pub get

      - name: Build Android APK
        run: |
          flutter build apk --release --target=lib/main_prod.dart \
                            --dart-define=ENVIRONMENT=production \
                            --dart-define=API_BASE_URL=${{ secrets.PROD_API_BASE_URL }} \
                            --dart-define=RAG_SERVICE_URL=${{ secrets.PROD_RAG_SERVICE_URL }}
          echo "Android APK build completed"

      - name: Build Android AAB
        run: |
          flutter build appbundle --release --target=lib/main_prod.dart \
                                  --dart-define=ENVIRONMENT=production \
                                  --dart-define=API_BASE_URL=${{ secrets.PROD_API_BASE_URL }} \
                                  --dart-define=RAG_SERVICE_URL=${{ secrets.PROD_RAG_SERVICE_URL }}
          echo "Android AAB build completed"

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-releases
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: [quality-check, integration-tests]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup iOS certificates and provisioning profiles
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
        run: |
          # Create certificates directory
          mkdir -p ~/certificates

          # Import certificate
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > ~/certificates/ios_certificate.p12

          # Import provisioning profile
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > ~/certificates/ios_profile.mobileprovision

          # Install certificate
          security create-keychain -p "" build.keychain
          security import ~/certificates/ios_certificate.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -A
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain

          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ~/certificates/ios_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Get dependencies
        run: flutter pub get

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign \
                            --target=lib/main_prod.dart \
                            --dart-define=ENVIRONMENT=production \
                            --dart-define=API_BASE_URL=${{ secrets.PROD_API_BASE_URL }} \
                            --dart-define=RAG_SERVICE_URL=${{ secrets.PROD_RAG_SERVICE_URL }}
          echo "iOS build completed"

      - name: Archive iOS app
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
                     -scheme Runner \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath Runner.xcarchive \
                     archive

      - name: Export iOS app
        run: |
          cd ios
          xcodebuild -exportArchive \
                     -archivePath Runner.xcarchive \
                     -exportPath ../build/ios \
                     -exportOptionsPlist ExportOptions.plist

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-releases
          path: |
            build/ios/*.ipa

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: [quality-check, integration-tests]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build Web
        run: |
          flutter build web --release --target=lib/main_prod.dart \
                            --dart-define=ENVIRONMENT=production \
                            --dart-define=API_BASE_URL=${{ secrets.PROD_API_BASE_URL }} \
                            --dart-define=RAG_SERVICE_URL=${{ secrets.PROD_RAG_SERVICE_URL }} \
                            --web-renderer canvaskit \
                            --base-href /duacopilot/
          echo "Web build completed"

      - name: Upload Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-release
          path: build/web/

  # Performance Testing
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-android, build-web]
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-release
          path: build/web/

      - name: Setup Node.js for Lighthouse
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          # Serve the web app
          python3 -m http.server 8080 --directory build/web &
          SERVER_PID=$!

          # Wait for server to start
          sleep 5

          # Run Lighthouse CI
          lhci autorun --upload.target=temporary-public-storage || true

          # Cleanup
          kill $SERVER_PID
          echo "Performance testing completed"

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: .lighthouseci/

  # Security Testing
  security-testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-web]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "DuaCopilot"
          path: "."
          format: "ALL"

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-reports
          path: reports/

      - name: Security code scan
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_DART: true

  # Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs:
      [
        build-android,
        build-ios,
        build-web,
        performance-testing,
        security-testing,
      ]
    if: github.ref == 'refs/heads/main'
    environment: staging
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-release
          path: build/web/

      - name: Deploy to Firebase Hosting (Staging)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}"
          channelId: staging
          projectId: duacopilot-staging

      - name: Deploy Android to Firebase App Distribution (Staging)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID_STAGING }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}
          groups: testers-staging
          file: build/app/outputs/flutter-apk/app-release.apk
          releaseNotes: "Staging release - Build ${{ github.run_number }}"

      - name: Notify staging deployment
        run: |
          echo "Staging deployment completed successfully"
          echo "Web: https://duacopilot-staging.web.app"
          echo "Build number: ${{ github.run_number }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Deploy Web to Firebase Hosting (Production)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}"
          channelId: live
          projectId: duacopilot-prod

      - name: Deploy Android to Google Play Console
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.duacopilot.app
          releaseFiles: android-releases/*.aab
          track: production
          status: completed
          inAppUpdatePriority: 3
          whatsNewDirectory: fastlane/metadata/android/en-US/changelogs/

      - name: Deploy iOS to App Store Connect
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ios-releases/*.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: DuaCopilot ${{ github.ref }}
          body: |
            ## Production Release ${{ github.ref }}

            ### Features:
            - RAG-powered Islamic knowledge search
            - Real-time monitoring and analytics
            - Cross-platform compatibility (Android, iOS, Web)

            ### Build Information:
            - Build Number: ${{ github.run_number }}
            - Commit SHA: ${{ github.sha }}
            - Environment: Production

            ### Downloads:
            - [Android APK](./android-releases/app-release.apk)
            - [iOS IPA](./ios-releases/Runner.ipa)
            - [Web App](https://duacopilot.com)
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android-releases/app-release.apk
          asset_name: duacopilot-${{ github.ref }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Notify production deployment
        run: |
          echo "🚀 Production deployment completed successfully!"
          echo "📱 Android: Available on Google Play Store"
          echo "🍎 iOS: Available on Apple App Store"
          echo "🌐 Web: https://duacopilot.com"
          echo "📊 Version: ${{ github.ref }}"
          echo "🔢 Build: ${{ github.run_number }}"

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 15

    steps:
      - name: Health check - Web
        run: |
          curl -f https://duacopilot.com/health || exit 1
          echo "Web health check passed"

      - name: Performance check
        run: |
          # Run basic performance checks
          curl -w "Response time: %{time_total}s\n" -o /dev/null -s https://duacopilot.com
          echo "Performance check completed"

      - name: Monitor Firebase services
        run: |
          echo "Monitoring Firebase services..."
          # Add Firebase service monitoring logic here
          echo "Firebase services monitoring completed"

      - name: Update deployment status
        run: |
          echo "✅ Post-deployment monitoring completed"
          echo "🔍 All systems operational"
          echo "📈 Performance metrics within acceptable range"
          echo "🛡️ Security checks passed"
