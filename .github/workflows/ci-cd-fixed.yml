# CI/CD Pipeline for DuaCopilot
name: 🚀 DuaCopilot CI/CD

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"

env:
  FLUTTER_VERSION: "3.29.1"

jobs:
  analyze:
    name: 📊 Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🔍 Verify Formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: 🧪 Analyze Code
        run: flutter analyze --fatal-infos

      - name: 🔒 Check for Security Issues
        run: dart pub audit

  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, widget]
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              flutter test test/ --coverage --test-randomize-ordering-seed random --reporter=compact
              ;;
            integration)
              flutter test integration_test/ --coverage --reporter=compact
              ;;
            widget)
              flutter test test/ --coverage --reporter=compact --dart-define=flutter.inspector.structuredErrors=true
              ;;
          esac

      - name: 📈 Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/lcov.info
          fail_ci_if_error: false
        if: matrix.test-type == 'unit'

  build:
    name: 🏗️ Build Applications
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target: [android, ios, web, windows, macos, linux]
        include:
          - target: android
            os: ubuntu-latest
          - target: ios
            os: macos-latest
          - target: web
            os: ubuntu-latest
          - target: windows
            os: windows-latest
          - target: macos
            os: macos-latest
          - target: linux
            os: ubuntu-latest
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 🔧 Setup Platform Dependencies
        run: |
          case "${{ matrix.target }}" in
            android)
              sudo apt-get update
              sudo apt-get install -y openjdk-17-jdk
              ;;
            linux)
              sudo apt-get update
              sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
              ;;
          esac
        if: runner.os == 'Linux'

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🏗️ Build ${{ matrix.target }}
        run: |
          case "${{ matrix.target }}" in
            android)
              flutter build apk --release --split-per-abi
              flutter build appbundle --release
              ;;
            ios)
              flutter build ios --release --no-codesign
              ;;
            web)
              flutter build web --release --web-renderer canvaskit
              ;;
            windows)
              flutter build windows --release
              ;;
            macos)
              flutter build macos --release
              ;;
            linux)
              flutter build linux --release
              ;;
          esac

      - name: 📦 Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-build
          path: |
            build/app/outputs/**/*
            build/web/**/*
            build/windows/x64/runner/Release/**/*
            build/macos/Build/Products/Release/**/*
            build/linux/x64/release/bundle/**/*
          if-no-files-found: warn

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📤 Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: ⚡ Build Performance Profile
        run: flutter build web --profile --dart-define=FLUTTER_WEB_CANVASKIT_URL=https://unpkg.com/canvaskit-wasm@0.37.2/bin/

      - name: 📊 Bundle Analysis
        run: |
          mkdir -p lib/core/performance/reports
          dart pub global activate -s git https://github.com/dart-lang/web_benchmarks.git
          dart pub global run web_benchmarks:bundle_size --target web --output-directory lib/core/performance/reports/

      - name: 📦 Archive Performance Reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: lib/core/performance/reports/

  deploy:
    name: 🚢 Deploy
    needs: [analyze, test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🏗️ Build Web Production
        run: flutter build web --release --web-renderer canvaskit

      - name: 📦 Archive Web Build
        uses: actions/upload-artifact@v4
        with:
          name: web-build-production
          path: build/web/

      # Note: Firebase deployment requires proper firebase.json configuration
      # Uncomment and configure the following step when Firebase is set up:
      # - name: 🚢 Deploy to Firebase Hosting
      #   uses: FirebaseExtended/action-hosting-deploy@v0
      #   with:
      #     repoToken: "${{ secrets.GITHUB_TOKEN }}"
      #     firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
      #     projectId: duacopilot
      #     channelId: live

  # Arabic/RTL Integration Testing - specific for the recently integrated features
  arabic-rtl-test:
    name: 🔤 Arabic RTL Integration Test
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🔤 Run Arabic RTL Tests
        run: flutter test integration_test/arabic_rtl_support_test.dart --reporter=compact

      - name: 📊 Generate RTL Test Report
        run: |
          echo "## Arabic RTL Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ All Arabic RTL features tested successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Text direction detection" >> $GITHUB_STEP_SUMMARY
          echo "- Arabic font rendering" >> $GITHUB_STEP_SUMMARY
          echo "- RTL layout support" >> $GITHUB_STEP_SUMMARY
          echo "- Bidirectional text handling" >> $GITHUB_STEP_SUMMARY
