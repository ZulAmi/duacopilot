# 🕌 DuaCopilot Complete CI/CD Pipeline
# Unified pipeline for all environments and scenarios
name: 🕌 DuaCopilot CI/CD

on:
  push:
    branches: [main, develop, feature/*]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "*.txt"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: "3.29.1"
  DART_VERSION: "3.5.1"

# ==================== JOB MATRIX ====================
jobs:
  
  # 📊 FAST ANALYSIS (runs on all branches)
  analyze:
    name: 📊 Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-deploy: ${{ steps.deployment-check.outputs.should-deploy }}
      environment: ${{ steps.deployment-check.outputs.environment }}
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🔍 Code Formatting Check
        run: dart format --output=none --set-exit-if-changed .

      - name: 🧪 Static Analysis
        run: flutter analyze --fatal-infos

      - name: 🔒 Security Audit
        run: dart pub audit --json || true

      - name: 🎯 Determine Deployment Strategy
        id: deployment-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

  # 🧪 COMPREHENSIVE TESTING
  test:
    name: 🧪 Test Suite
    needs: analyze
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, widget]
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              flutter test test/ --coverage --test-randomize-ordering-seed random
              ;;
            integration)
              if [ -d "integration_test" ]; then
                flutter test integration_test/ --coverage
              else
                echo "No integration tests found, skipping..."
              fi
              ;;
            widget)
              flutter test test/ --coverage --dart-define=flutter.inspector.structuredErrors=true
              ;;
          esac

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.test-type == 'unit' && always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/lcov.info
          flags: ${{ matrix.test-type }}
          name: duacopilot-${{ matrix.test-type }}
          fail_ci_if_error: false
        continue-on-error: true

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: coverage/
          retention-days: 7

  # 🕌 ISLAMIC FEATURES VALIDATION
  islamic-features:
    name: 🕌 Islamic Features Validation
    needs: analyze
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🔤 Arabic RTL Support Check
        run: |
          echo "## 🔤 Arabic RTL Support Validation" >> $GITHUB_STEP_SUMMARY
          if grep -r "TextDirection.rtl" lib/ > /dev/null; then
            echo "✅ RTL text direction support found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Warning: No RTL text direction found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🕌 Islamic Content Features Check
        run: |
          echo "## 🕌 Islamic Features Validation" >> $GITHUB_STEP_SUMMARY
          ISLAMIC_FEATURES=("prayer" "qibla" "hijri" "quran" "dua" "islamic")
          for feature in "${ISLAMIC_FEATURES[@]}"; do
            if grep -r -i "$feature" lib/ > /dev/null 2>&1; then
              echo "✅ Islamic feature '$feature' implementation found" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️  Islamic feature '$feature' not detected" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: 🧪 Run Islamic Feature Tests
        run: |
          echo "## 🧪 Islamic Feature Tests" >> $GITHUB_STEP_SUMMARY
          # Test Arabic RTL if integration test exists
          if [ -f "integration_test/arabic_rtl_support_test.dart" ]; then
            flutter test integration_test/arabic_rtl_support_test.dart && echo "✅ Arabic RTL integration test passed" >> $GITHUB_STEP_SUMMARY || echo "❌ Arabic RTL test failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️  No Arabic RTL integration test found" >> $GITHUB_STEP_SUMMARY
          fi

  # 🏗️ MULTI-PLATFORM BUILD (selective based on branch)
  build:
    name: 🏗️ Build ${{ matrix.target }}
    needs: [analyze, test]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        # Build all platforms on main/develop, limited set on feature branches
        target: ${{ github.ref == 'refs/heads/main' && fromJson('["android", "ios", "web", "windows", "macos", "linux"]') || github.ref == 'refs/heads/develop' && fromJson('["android", "web", "windows"]') || fromJson('["web"]') }}
        include:
          - target: android
            os: ubuntu-latest
          - target: ios
            os: macos-latest
          - target: web
            os: ubuntu-latest
          - target: windows
            os: windows-latest
          - target: macos
            os: macos-latest
          - target: linux
            os: ubuntu-latest
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      # Platform-specific dependencies
      - name: 🔧 Setup Android Dependencies
        if: matrix.target == 'android'
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk

      - name: 🔧 Setup Linux Dependencies
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: 🏗️ Build ${{ matrix.target }}
        run: |
          case "${{ matrix.target }}" in
            android)
              flutter build apk --release --split-per-abi
              flutter build appbundle --release
              ;;
            ios)
              flutter build ios --release --no-codesign
              ;;
            web)
              flutter build web --release --web-renderer canvaskit
              ;;
            windows)
              flutter build windows --release
              ;;
            macos)
              flutter build macos --release
              ;;
            linux)
              flutter build linux --release
              ;;
          esac

      - name: 📦 Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: |
            build/app/outputs/**/*
            build/web/**/*
            build/windows/x64/runner/Release/**/*
            build/macos/Build/Products/Release/**/*
            build/linux/x64/release/bundle/**/*
          retention-days: 30

  # 🔒 SECURITY SCANNING (main/develop branches only)
  security:
    name: 🔒 Security Scan
    needs: analyze
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(fromJson('["refs/heads/main", "refs/heads/develop"]'), github.ref)
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔒 Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📤 Upload SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🕵️ Secret Detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ⚡ PERFORMANCE ANALYSIS (production builds only)
  performance:
    name: ⚡ Performance Analysis
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(fromJson('["refs/heads/main", "refs/heads/develop"]'), github.ref)
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: ⚡ Build Performance Profile
        run: |
          flutter build web --profile --source-maps
          echo "## ⚡ Performance Analysis Results" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Bundle Size Analysis
        run: |
          WEB_SIZE=$(du -sh build/web | cut -f1)
          echo "📦 Web bundle size: $WEB_SIZE" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Archive Performance Data
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis
          path: build/web/
          retention-days: 7

  # 🚢 DEPLOYMENT (conditional)
  deploy:
    name: 🚢 Deploy to ${{ needs.analyze.outputs.environment }}
    needs: [analyze, test, build, islamic-features]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: needs.analyze.outputs.should-deploy == 'true'
    environment: 
      name: ${{ needs.analyze.outputs.environment }}
      url: ${{ steps.deployment.outputs.url }}
    steps:
      - name: 📚 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: build-web
          path: build/web/

      - name: 🚢 Deploy to Firebase Hosting
        id: deployment
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          projectId: duacopilot
          channelId: ${{ needs.analyze.outputs.environment == 'production' && 'live' || 'staging' }}
        continue-on-error: true

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚢 Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "🎯 Environment: ${{ needs.analyze.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 Deployed at: $(date)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.deployment.outcome }}" == "success" ]; then
            echo "✅ Deployment successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed (check Firebase configuration)" >> $GITHUB_STEP_SUMMARY
          fi

  # 📋 PIPELINE SUMMARY
  summary:
    name: 📋 Pipeline Summary
    needs: [analyze, test, build, islamic-features, security, performance, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "# 🕌 DuaCopilot CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Job Status:" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Analysis: ${{ needs.analyze.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Testing: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️  Building: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🕌 Islamic Features: ${{ needs.islamic-features.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚢 Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.analyze.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.islamic-features.result }}" == "success" ]]; then
            echo "## ✅ Pipeline Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All core jobs completed successfully. DuaCopilot is ready! 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Pipeline Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Some jobs failed. Please check the logs above. 🔍" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🕌 **Built with love for the Ummah** 🤲" >> $GITHUB_STEP_SUMMARY
