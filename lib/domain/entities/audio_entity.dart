import 'package:freezed_annotation/freezed_annotation.dart';

part 'audio_entity.freezed.dart';
part 'audio_entity.g.dart';

@freezed
/// AudioTrack class implementation
class AudioTrack with _$AudioTrack {
  const factory AudioTrack({
    required String id,
    required String duaId,
    required String title,
    required String reciter,
    required String language,
    required AudioQuality quality,
    required String url,
    required Duration duration,
    required int fileSizeBytes,
    required double ragConfidenceScore,
    String? localPath,
    String? checksumMd5,
    @Default(false) bool isDownloaded,
    @Default(false) bool isDownloading,
    @Default(0.0) double downloadProgress,
    DateTime? lastAccessed,
    DateTime? downloadedAt,
    @Default([]) List<String> tags,
    Map<String, dynamic>? metadata,
  }) = _AudioTrack;

  factory AudioTrack.fromJson(Map<String, dynamic> json) =>
      _$AudioTrackFromJson(json);
}

@freezed
/// Playlist class implementation
class Playlist with _$Playlist {
  const factory Playlist({
    required String id,
    required String name,
    required String description,
    required List<String> trackIds,
    required PlaylistType type,
    required DateTime createdAt,
    DateTime? lastModified,
    String? coverImageUrl,
    @Default(false) bool isAutoGenerated,
    double? averageRagScore,
    Map<String, dynamic>? ragMetadata,
  }) = _Playlist;

  factory Playlist.fromJson(Map<String, dynamic> json) =>
      _$PlaylistFromJson(json);
}

@freezed
/// AudioCacheItem class implementation
class AudioCacheItem with _$AudioCacheItem {
  const factory AudioCacheItem({
    required String trackId,
    required String localPath,
    required int fileSizeBytes,
    required DateTime cachedAt,
    required String checksumMd5,
    required int accessCount,
    DateTime? lastAccessed,
    @Default(CacheStatus.cached) CacheStatus status,
    @Default(CachePriority.normal) CachePriority priority,
  }) = _AudioCacheItem;

  factory AudioCacheItem.fromJson(Map<String, dynamic> json) =>
      _$AudioCacheItemFromJson(json);
}

@freezed
/// AudioDownloadJob class implementation
class AudioDownloadJob with _$AudioDownloadJob {
  const factory AudioDownloadJob({
    required String id,
    required String trackId,
    required String url,
    required String targetPath,
    required DownloadPriority priority,
    required DateTime queuedAt,
    @Default(DownloadStatus.queued) DownloadStatus status,
    @Default(0.0) double progress,
    @Default(0) int bytesDownloaded,
    @Default(0) int totalBytes,
    DateTime? startedAt,
    DateTime? completedAt,
    String? errorMessage,
    @Default(0) int retryCount,
  }) = _AudioDownloadJob;

  factory AudioDownloadJob.fromJson(Map<String, dynamic> json) =>
      _$AudioDownloadJobFromJson(json);
}

@freezed
/// AudioPlaybackState class implementation
class AudioPlaybackState with _$AudioPlaybackState {
  const factory AudioPlaybackState({
    String? currentTrackId,
    @Default(PlayerState.stopped) PlayerState playerState,
    @Default(Duration.zero) Duration position,
    @Default(Duration.zero) Duration duration,
    @Default(1.0) double speed,
    @Default(RepeatMode.none) RepeatMode repeatMode,
    @Default(false) bool isShuffling,
    @Default([]) List<String> queue,
    @Default(0) int currentIndex,
    @Default(1.0) double volume,
    @Default(false) bool isMuted,
  }) = _AudioPlaybackState;

  factory AudioPlaybackState.fromJson(Map<String, dynamic> json) =>
      _$AudioPlaybackStateFromJson(json);
}

enum AudioQuality {
  @JsonValue('low')
  low,
  @JsonValue('medium')
  medium,
  @JsonValue('high')
  high,
  @JsonValue('lossless')
  lossless,
}

enum PlaylistType {
  @JsonValue('user_created')
  userCreated,
  @JsonValue('rag_recommended')
  ragRecommended,
  @JsonValue('recent')
  recent,
  @JsonValue('favorites')
  favorites,
  @JsonValue('downloaded')
  downloaded,
}

enum CacheStatus {
  @JsonValue('cached')
  cached,
  @JsonValue('corrupted')
  corrupted,
  @JsonValue('expired')
  expired,
}

enum CachePriority {
  @JsonValue('low')
  low,
  @JsonValue('normal')
  normal,
  @JsonValue('high')
  high,
  @JsonValue('critical')
  critical,
}

enum DownloadPriority {
  @JsonValue('low')
  low,
  @JsonValue('normal')
  normal,
  @JsonValue('high')
  high,
  @JsonValue('urgent')
  urgent,
}

enum DownloadStatus {
  @JsonValue('queued')
  queued,
  @JsonValue('downloading')
  downloading,
  @JsonValue('completed')
  completed,
  @JsonValue('failed')
  failed,
  @JsonValue('cancelled')
  cancelled,
  @JsonValue('paused')
  paused,
}

enum PlayerState {
  @JsonValue('stopped')
  stopped,
  @JsonValue('playing')
  playing,
  @JsonValue('paused')
  paused,
  @JsonValue('buffering')
  buffering,
  @JsonValue('error')
  error,
}

enum RepeatMode {
  @JsonValue('none')
  none,
  @JsonValue('one')
  one,
  @JsonValue('all')
  all,
}

extension AudioQualityExtension on AudioQuality {
  String get displayName {
    switch (this) {
      case AudioQuality.low:
        return 'Low (64 kbps)';
      case AudioQuality.medium:
        return 'Medium (128 kbps)';
      case AudioQuality.high:
        return 'High (256 kbps)';
      case AudioQuality.lossless:
        return 'Lossless (FLAC)';
    }
  }

  int get bitrate {
    switch (this) {
      case AudioQuality.low:
        return 64;
      case AudioQuality.medium:
        return 128;
      case AudioQuality.high:
        return 256;
      case AudioQuality.lossless:
        return 1411;
    }
  }
}

extension DownloadPriorityExtension on DownloadPriority {
  int get weight {
    switch (this) {
      case DownloadPriority.low:
        return 1;
      case DownloadPriority.normal:
        return 5;
      case DownloadPriority.high:
        return 10;
      case DownloadPriority.urgent:
        return 20;
    }
  }
}

extension CachePriorityExtension on CachePriority {
  int get weight {
    switch (this) {
      case CachePriority.low:
        return 1;
      case CachePriority.normal:
        return 5;
      case CachePriority.high:
        return 10;
      case CachePriority.critical:
        return 20;
    }
  }
}
